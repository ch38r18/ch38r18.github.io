<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码 on </title>
    <link>https://ch38r18.github.io/tags/%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in 源码 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 25 Jan 2021 10:21:20 +0000</lastBuildDate><atom:link href="https://ch38r18.github.io/tags/%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>读懂 Hexo 源码设计模式</title>
      <link>https://ch38r18.github.io/hexo/20210125a%E8%AF%BB%E6%87%82hexo%E6%BA%90%E7%A0%81/</link>
      <pubDate>Mon, 25 Jan 2021 10:21:20 +0000</pubDate>
      
      <guid>https://ch38r18.github.io/hexo/20210125a%E8%AF%BB%E6%87%82hexo%E6%BA%90%E7%A0%81/</guid>
      <description>hexo定义 是一个JS语言编写的静态网站生成器， 主要作用是解析Markdown语法，并配合模板引擎，快速生成静态网站。 同时，还可以自定义主题，引用第三方插件， 除了搭建个人博客之外，Hexo还被许许多多的项目拿来生成API文档  框架特色 Node.js运行环境，速度极快，扩展能力强，强大的插件系统，可配置性高，一键编译部署， 适用于博客，静态个人网站，开源项目文档， 最受欢迎的JS静态网站生成器。  Hexo命令行设计 在命令行模块，Hexo选择使用minimist来解析命令行参数得到一个js对象， 并建立一个Hexo实例并初始化， 最后通过实例对象call方法传递命令行指令。  var args = minimist(process.argv.slice(2)) var cmd = args._.shift() var hexo = new Hexo() hexo.init() hexo.call(cmd, args)  Hexo入口模块设计 同大多数框架相同，Hexo采用构造-原型组合模式定义类，采用组合继承的方式继承Node中EventEmitter模块，更容易得通过on与emit发布与订阅事件。 在实例化阶段，保存所编译文件存放的路径、输出路径及其它脚本、插件、主题等所处的路径，保存环境变量，即命令行参数、版本号等基本信息。 创建扩展对象，按不同的功能进行分类，作用是创建store，用于注册句柄，获取句柄，以便后续编译过程调用， 在Hexo中，扩展类型包括 控制台(Console)、 部署器(Deployer)、 过滤器(Filter)、 生成器(Generator)、 辅助函数(Helper)、 处理器(Processor）、 渲染引擎(Renderer)等等。  function Hexo(base, args) { EventEmitter.call(this) this.public_dir = path.join(base, &#39;public&#39;); this.source_dir = path.join(base, &#39;source&#39;); ... this.extend = { console: new extend.Console(), generator: new extend.Generator(), processor: new extend.</description>
    </item>
    
  </channel>
</rss>
